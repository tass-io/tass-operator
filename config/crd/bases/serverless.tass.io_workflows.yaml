
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  name: workflows.serverless.tass.io
spec:
  group: serverless.tass.io
  names:
    kind: Workflow
    listKind: WorkflowList
    plural: workflows
    singular: workflow
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Workflow is the Schema for the workflows API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: WorkflowSpec defines the desired state of Workflow
          properties:
            env:
              additionalProperties:
                type: string
              description: Env is the environment variables for the Workflow It is
                defined by users
              type: object
            spec:
              description: Spec is a list of Flows
              items:
                description: Flow defines the logic of a Function in a workflow
                properties:
                  conditions:
                    description: Conditions are the control logic group of the flow
                      The first element of the Conditions is the root control logic
                      Only worked when the Statement is 'Switch'
                    items:
                      description: "Condition is the control logic of the flow A sample
                        of Condition ```yaml condition: \t name: root \t type: int
                        \t operator: gt \t target: $.a \t comparision: 50 \t destination:
                        \t\t isTrue:  # ... \t\t isFalse: # ... ``` It is same as:
                        if $.a >= 50 { \t goto isTrue logic } else { \t goto isFalse
                        logic }"
                      properties:
                        comparision:
                          description: Comparision is used to compare with the flow
                            result Comparision can be a realistic value, like "cash",
                            "5", "true" it can also be a property of the flow result,
                            like "$.b"
                          type: string
                        destination:
                          description: Destination defines the downstream Flows based
                            on the condition result
                          properties:
                            isFalse:
                              description: IsFalse defines the downstream Flows if
                                the condition is not satisfied
                              properties:
                                conditions:
                                  description: Condition lists the Condition where
                                    the result of the current Flow goes It means that
                                    the result needs more control logic check
                                  items: {}
                                  type: array
                                flows:
                                  description: Flows lists the Flows where the result
                                    of the current Flow goes
                                  items:
                                    type: string
                                  type: array
                              type: object
                            isTrue:
                              description: IsTrue defines the downstream Flows if
                                the condition is satisfied
                              properties:
                                conditions:
                                  description: Condition lists the Condition where
                                    the result of the current Flow goes It means that
                                    the result needs more control logic check
                                  items: {}
                                  type: array
                                flows:
                                  description: Flows lists the Flows where the result
                                    of the current Flow goes
                                  items:
                                    type: string
                                  type: array
                              type: object
                          type: object
                        name:
                          description: Name is the name of a Condition, it's unique
                            in a Condition group
                          type: string
                        operator:
                          description: 'Operator defines the illegal operation in
                            workflow condition statement Valid values are: - eq: The
                            result is equal to the target - ne: The result is not
                            equal to the target - lt: The result is less than the
                            target - le: The result is less than or equal to the target
                            - gt: The result is greater than the target - ge: The
                            result is greater than or equal to the target.'
                          enum:
                          - eq
                          - ne
                          - lt
                          - le
                          - gt
                          - ge
                          type: string
                        target:
                          description: "Target shows the specific data that the flow
                            result uses to compare with The result of the flow can
                            be a simple type like string, bool or int But it can also
                            be a complex object contains some fileds Whatever the
                            result is, the Flow runtime will wrap the result to a
                            JSON object to unifiy the transmission process. For example,
                            the result of the user code is a string type, let's say
                            \"tass\", and then it will be wrapped as a JSON object
                            {\"$\": \"tass\"} as the result of the Flow. \n If the
                            result of user code is not a simple type, it can be much
                            more complex For example, the Flow result can be {\"$\":{\"name\":
                            \"tass\",\"type\": \"faas\"}} So in this case, if we want
                            to use the \"type\" property to compare with Comparision,
                            the Target value should be \"$.type\" \n If users don't
                            specify the Target field,or the Target value is just \"$\",
                            it means the user code result is just a simple type Otherwise,
                            the user must provide a Target value to claim the property
                            to use One more example to show how to get the key in
                            Flow result Let's say the result is {\"$\":{\"name\":\"tass\",\"info\":{\"type\":\"fn\",\"timeout\":60}}}
                            We want the \"timeout\" key, so the Target value is \"$.info.timeout\""
                          type: string
                        type:
                          description: 'Type is the data type that Tass workflow condition
                            support It also implicitly shows the result type of the
                            flow Valid values are: - string: The condition type is
                            string - int: The condition type is int - bool: The condition
                            type is boolean'
                          enum:
                          - string
                          - int
                          - bool
                          type: string
                      required:
                      - comparision
                      - destination
                      - name
                      - operator
                      - type
                      type: object
                    type: array
                  function:
                    description: Function is the function name which has been defined
                      in Tass
                    type: string
                  name:
                    description: Name is the name of the flow which is unique in a
                      workflow. A function may be called multiple times in different
                      places in a workflow. So we need a Flow name to clear the logic.
                    type: string
                  outputs:
                    description: Outputs specify where the result of this flow should
                      go
                    items:
                      type: string
                    type: array
                  role:
                    description: 'Role is the role of the Flow Valid values are: -
                      start: The role of the Flow is "start" which means it is the
                      entrance of workflow instance - end: The role of the Flow is
                      "end" which means it is the exit point of workflow instance
                      - orphan: The role of the Flow is "orphan" which is a special
                      case that the workflow instance has only one function If no
                      value is specified, it means this is an intermediate Flow instance'
                    enum:
                    - start
                    - end
                    type: string
                  statement:
                    description: 'Statement shows the flow control logic type Valid
                      values are: - direct: The result of the flow go to downstream
                      directly; - switch: The result of the flow go to downstream
                      based on the switch condition;'
                    enum:
                    - direct
                    - switch
                    type: string
                required:
                - function
                - name
                - statement
                type: object
              type: array
          required:
          - spec
          type: object
        status:
          description: WorkflowStatus defines the observed state of Workflow
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
